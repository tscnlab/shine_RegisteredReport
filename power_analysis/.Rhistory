e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
print(length(y))
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
View(fake_data_results_2)
View(fake_data_results_2_summary)
View(fake_data_results_2_summary)
View(fake_data_results_2)
# We start by defining variables of our model
intercept_mean_list <- list(1, 5, 10)
e2_slope_mean_list <- list(0.001, 0.01, 0.1)
p4_slope_mean_list <- list(0.001, 0.01, 0.1)
e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
print(length(y))
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
View(fake_data_results_2)
View(fake_data_results_2_summary)
View(fake_data_results_2)
# We start by defining variables of our model
intercept_mean_list <- list(1, 5, 15)
e2_slope_mean_list <- list(0.001, 0.01, 0.1)
p4_slope_mean_list <- list(0.001, 0.01, 0.1)
e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
print(length(y))
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
View(fake_data_results_2)
# We start by defining variables of our model
intercept_mean_list <- list(15, 30, 45)
e2_slope_mean_list <- list(0.001, 0.01, 0.1)
p4_slope_mean_list <- list(0.001, 0.01, 0.1)
e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
print(length(y))
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
View(fake_data_results_2)
# We start by defining variables of our model
intercept_mean_list <- list(15, 30, 45, 60, 75)
e2_slope_mean_list <- list(0.001, 0.01, 0.1)
p4_slope_mean_list <- list(0.001, 0.01, 0.1)
e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
print(length(y))
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
View(fake_data_results_2)
# We start by defining variables of our model
intercept_mean_list <- seq(0,70, by = 5)
e2_slope_mean_list <- list(0.001, 0.01, 0.1)
p4_slope_mean_list <- list(0.001, 0.01, 0.1)
e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
View(fake_data_results_2)
View(fake_data_results_2_summary)
# We start by defining variables of our model
intercept_mean_list <- seq(0,70, by = 5)
e2_slope_mean_list <- seq(0.01, 20, by = 1)
p4_slope_mean_list <- seq(0.01, 20, by = 1)
e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
View(fake_data_results_2)
fake_data_results_2_summary <- fake_data_results_2 %>%
filter(accepted == "yes") %>%
summarise(mean = mean(mean_y))
View(fake_data_results_2_summary)
fake_data_results_2_summary <- fake_data_results_2 %>%
filter(accepted == "yes")
View(fake_data_results_2_summary)
e2_slope_mean_list <- seq(0.01, 20, by = 0.9)
e2_slope_mean_list <- seq(0.001, 10, by = 0.01)
# We start by defining variables of our model
intercept_mean_list <- seq(0,70, by = 5)
e2_slope_mean_list <- seq(0.001, 10, by = 0.01)
p4_slope_mean_list <- seq(0.001, 10, by = 0.01)
e2_min_value <- 75.5
e2_max_value <- 2212
p4_min_value <- 0.159
p4_max_value <- 66.5
num_simulations <- 100
mlt_data_mean <- mlt_data_summary$mean
mlt_data_sd <- mlt_data_summary$sd
mlt_data_median <- mlt_data_summary$median
mlt_data_q1 <- mlt_data_summary$q1
mlt_data_q3 <- mlt_data_summary$q3
# Create empty data frame to store results
fake_data_results_2 <- data.frame(intercept_mean = numeric(),
e2_slope_mean = numeric(),
p4_slope_mean = numeric(),
mean_y = numeric(),
sd_y = numeric(),
accepted = factor())
for (intercept_mean in intercept_mean_list) { # loop over possible intercept means
for (e2_slope_mean in e2_slope_mean_list) { # loop over possible e2 slope means
for (p4_slope_mean in p4_slope_mean_list) { # loop over possible p4 slope means
# Simulate 100 samples of y for each parameter combination
y <- numeric(num_simulations)
for (simulation in seq_len(num_simulations)) {
# Sample E2 and P4 from uniform distribution
e2_value <- runif(1, e2_min_value, e2_max_value)
p4_value <- runif(1, p4_min_value, p4_max_value)
# Noise ~ N(0, 5)
noise <- rnorm(1, mean = 0, sd = 5)
# Intercept ~ N(intercept_mean, 10% of intercept_mean)
intercept <- rnorm(1, mean = intercept_mean, sd = 0.1 * intercept_mean)
# Slopes ~ N(slope_mean, 10% of slope_mean)
e2_slope <- rnorm(1, mean = e2_slope_mean, sd = 0.1 * e2_slope_mean)
p4_slope <- rnorm(1, mean = p4_slope_mean, sd = 0.1 * p4_slope_mean)
# Model
y[simulation] <- intercept + e2_slope * e2_value + p4_slope * p4_value + noise
}
# Calculate summary stats of y
mean_y <- mean(y)
sd_y <- sd(y)
# Determine if the mean of y is within q1 and q3 of the known melatonin data
accepted <- ifelse(mean_y >= mlt_data_q1 & mean_y <= mlt_data_q3, "yes", "no")
# Store results
fake_data_results_2 <- rbind(fake_data_results_2,
data.frame(intercept_mean = intercept_mean,
e2_slope_mean = e2_slope_mean,
p4_slope_mean = p4_slope_mean,
mean_y = mean_y,
sd_y = sd_y,
accepted = factor(accepted)))
}
}
}
fake_data_results_2_summary <- fake_data_results_2 %>%
filter(accepted == "yes") %>%
summarise(mean = mean(mean_y))
print(fake_data_results_2_summary)
# Save results as a csv that we can look at
write.csv(fake_data_results, "fake_data_results.csv", row.names = FALSE)
